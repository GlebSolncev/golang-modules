package structirung

import (
	"fmt"
	"golang.org/x/tools/go/packages"
	"io/ioutil"
	"strings"
)

func Execute(path string, pkg *packages.Package) {
	// Parser
	myStruct := parseStructs(pkg)

	generateNewFile(path, pkg.Name, myStruct)
}

/// generate General File with getters and setters
func generateNewFile(path string, namePackage string, myStruct Struct) {
	// Create Body file
	body := getSetters(myStruct)
	body = body + "\n" + getGetters(myStruct)

	body = "// Code generated by HS, DO NOT EDIT.\n\npackage " + namePackage + "\n\n" + body

	filename := path + "/" + strings.ToLower(myStruct.Name) + "_structuring.go"

	err := ioutil.WriteFile(filename, []byte(body), 0644)
	if err != nil {
		panic(err)
	}
}

// getSetters have for by Struct.Fields and create func Setter as string
func getSetters(coStr Struct) string {
	var bodySetter string
	fLatter := coStr.Name[0]
	fmt.Println(fLatter)
	for _, v := range coStr.Fields {
		bodySetter = bodySetter + "\n" + fmt.Sprintf("func (%s %s) Set%s(%s %s) {\n"+
			"\t%s.%s = %s\n"+
			"}\n", string(fLatter), coStr.Name, v.Name, v.Name, v.Type, string(fLatter), v.Name, v.Name)
	}

	return bodySetter
}

// getGetters have for by Struct.Fields and create func Getter as string.
func getGetters(coStr Struct) string {
	var bodySetter string
	fLatter := coStr.Name[0]
	fmt.Println(fLatter)
	for _, v := range coStr.Fields {
		bodySetter = bodySetter + "\n" + fmt.Sprintf("func (%s %s) Get%s() %s {\n"+
			"\treturn %s.%s\n"+
			"}\n", string(fLatter), coStr.Name, v.Name, v.Type, string(fLatter), v.Name)
	}

	return bodySetter
}
