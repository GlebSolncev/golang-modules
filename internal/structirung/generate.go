package structirung

import (
	"fmt"
	"golang.org/x/tools/go/packages"
	"io/ioutil"
	"strings"
)

var importBody []string
var argAll bool

func Execute(path string, pkg *packages.Package) {
	// Parser
	myStruct := parseStructs(pkg)
	generateNewFile(path, pkg.Name, myStruct)
}

/// generate General File with getters and setters
func generateNewFile(path string, pkgName string, myStruct Struct) {
	// Create Body file
	bodyFunc := getSetters(myStruct)
	bodyFunc = bodyFunc + getGetters(myStruct)

	body := "// Code generated by HS, DO NOT EDIT.\n\npackage " + pkgName + "\n" //+ importBody + ")\n" + "\n" + body

	if len(importBody) > 0 {
		imports := GetUniqueArr(importBody)
		body += "\nimport ( \n"
		for _, imp := range imports {
			body += "\t\"" + imp + "\"\n"
		}
		body += ") \n"
	}

	body += bodyFunc

	filename := path + "/" + strings.ToLower(myStruct.Name) + "_structuring.go"

	err := ioutil.WriteFile(filename, []byte(body), 0644)
	if err != nil {
		panic(err)
	}
}

// getSetters have for by Struct.Fields and create func Setter as string
func getSetters(coStr Struct) string {
	var bodySetter string
	fLatter := string(coStr.Name[0])

	for _, v := range coStr.Fields {
		if v.Private || argAll {
			if v.Imports != "" {
				importBody = append(importBody, v.Imports)
			}

			bodySetter = bodySetter + "\n" + fmt.Sprintf("func (%s %s) Set%s(%s %s) {\n"+
				"\t%s.%s = %s\n"+
				"}\n", fLatter, coStr.Name, getFLatterUpper(v.Name), v.Name, v.TypeS, fLatter, v.Name, v.Name)
		}
	}

	return bodySetter
}

// getGetters have for by Struct.Fields and create func Getter as string.
func getGetters(coStr Struct) string {
	var bodySetter string
	fLatter := strings.ToTitle(string(coStr.Name[0]))

	for _, v := range coStr.Fields {
		if v.Private || argAll {
			bodySetter = bodySetter + "\n" + fmt.Sprintf("func (%s %s) Get%s() %s {\n"+
				"\treturn %s.%s\n"+
				"}\n", fLatter, coStr.Name, getFLatterUpper(v.Name), v.TypeS, fLatter, v.Name)
		}
	}

	return bodySetter
}

// Upd for string
func getFLatterUpper(str string) string {
	return strings.ToUpper(string(str[0])) + strings.ToLower(str[1:])
}
