package structirung

import (
	"fmt"
	"io/ioutil"
	"strings"
)

/// generate General File with getters and setters
func generateNewFile(path string, pkgName string, myStruct Struct) {
	// Create Body file
	myStruct.generateFileBody()

	body := "// Code generated by HS, DO NOT EDIT.\n\npackage " + pkgName + "\n"

	if len(importBody) > 0 {
		imports := GetUniqueArr(importBody)
		body += "\nimport ( \n"
		for _, imp := range imports {
			body += "\t\"" + imp + "\"\n"
		}
		body += ") \n\n"
	}

	body += strings.Join(settersFunc, "\n") + strings.Join(gettersFunc, "\n")
	filename := path + "/" + strings.ToLower(myStruct.Name) + "_structuring.go"
	err := ioutil.WriteFile(filename, []byte(body), 0644)
	if err != nil {
		panic(err)
	}
}

// generateFileBody have for by Struct.Fields and create func Setter as string
func (coStr Struct) generateFileBody() {
	for _, v := range coStr.Fields {
		if v.Private || argAll {
			initImportBody(v.Imports)
			initSettersFunc(v, coStr.Name)
			initGettersFunc(v, coStr.Name)
		}
	}
}

// initImportBody add items to importBody
func initImportBody(imp string) {
	if imp != "" {
		importBody = append(importBody, imp)
	}
}

// initSettersFunc add items to settersFunc
func initSettersFunc(v Field, structName string) {
	fLatter := string(structName[0])

	settersFunc = append(settersFunc, fmt.Sprintf("func (%s %s) Set%s(%s %s) {\n"+
		"\t%s.%s = %s\n"+
		"}\n", fLatter, structName, getFLatterUpper(v.Name), v.Name, v.TypeS, fLatter, v.Name, v.Name))
}

// initGettersFunc add items to gettersFunc
func initGettersFunc(v Field, structName string) {
	fLatter := string(structName[0])

	gettersFunc = append(gettersFunc, fmt.Sprintf("func (%s %s) Get%s() %s {\n"+
		"\treturn %s.%s\n"+
		"}\n", fLatter, structName, getFLatterUpper(v.Name), v.TypeS, fLatter, v.Name))
}

// Upd for string
func getFLatterUpper(str string) string {
	return strings.ToUpper(string(str[0])) + strings.ToLower(str[1:])
}
